{
  "_args": [
    [
      {
        "raw": "nanopage@0.0.1-next.3",
        "scope": null,
        "escapedName": "nanopage",
        "name": "nanopage",
        "rawSpec": "0.0.1-next.3",
        "spec": "0.0.1-next.3",
        "type": "version"
      },
      "/Users/daniellerobinson/Sites/daniellecrobinson/source/node_modules/enoki"
    ]
  ],
  "_from": "nanopage@0.0.1-next.3",
  "_id": "nanopage@0.0.1-next.3",
  "_inCache": true,
  "_location": "/nanopage",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nanopage_0.0.1-next.3_1524260582023_0.5574969486808774"
  },
  "_npmUser": {
    "name": "jondashkyle",
    "email": "contact@jon-kyle.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nanopage@0.0.1-next.3",
    "scope": null,
    "escapedName": "nanopage",
    "name": "nanopage",
    "rawSpec": "0.0.1-next.3",
    "spec": "0.0.1-next.3",
    "type": "version"
  },
  "_requiredBy": [
    "/enoki"
  ],
  "_resolved": "https://registry.npmjs.org/nanopage/-/nanopage-0.0.1-next.3.tgz",
  "_shasum": "62af483012ff602578cf99a4a27e489cf31cab3c",
  "_shrinkwrap": null,
  "_spec": "nanopage@0.0.1-next.3",
  "_where": "/Users/daniellerobinson/Sites/daniellecrobinson/source/node_modules/enoki",
  "author": {
    "name": "Jon-Kyle",
    "email": "contact@jon-kyle.com",
    "url": "http://jon-kyle.com"
  },
  "bugs": {
    "url": "https://github.com/jondashkyle/nanopage/issues"
  },
  "dependencies": {
    "object-keys": "^1.0.11",
    "object-values": "^2.0.0",
    "resolve-path": "^1.4.0",
    "xtend": "^4.0.1"
  },
  "description": "handy utility methods for traversing content state",
  "devDependencies": {
    "tape": "^4.9.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-YjxZ5giQVl0tR33YoxqXgHTilKOtNI7JfqO4WYmJ//gn8/nqOPAyXajc/HQGQLNYQE/reSiMDCDRNN+BlVxGuw==",
    "shasum": "62af483012ff602578cf99a4a27e489cf31cab3c",
    "tarball": "https://registry.npmjs.org/nanopage/-/nanopage-0.0.1-next.3.tgz",
    "fileCount": 7,
    "unpackedSize": 25247,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa2l7mCRA9TVsSAnZWagAAEvEP/0ulr1y7HkhnHQ01785+\nGPU8f2S/FrXgQYw6swHA2Gctq0VCAaQ5kerj566NbROFOx0M8a6n4QXiLE2y\nvnxnbIfG9opJvfumv5rBoF9IndRB0BHRXKLGg030kPt87xU4+c/Pw1CkDRRK\ne4YANO3aehai+49NSRNkIgkGSG20mAtV7LTxphr0zVEW7QSQh7N0fYjcvzuK\nlLiY6L/4834tUmaC1yBATeO/5VhozTmoZ1NtO9kEWHdwD39FX1txokbzkMOH\nMq/RQRyv9E22u/GAMeYIRarNl69Mi0q0uwNogsQqfq2kiQKoEcf52lnePT+4\ncZx+OA+tBr5Ndw+aGOSUxrYym3562QpgR96hU+mYZ8HHhWHIyb8V5bGIKbYw\nqc5Aamnkaxy8RriAMvNnRm+ARXLa38oipOV2kzaWV1swrXUgKDntTQzGOXgL\nxjVtrSsf3wHyTBbYx7HXRxxnJKempY3QohxzQ3ZLSu/1H+N7d4rUpk3HcrlF\nbf1SmINlhB7GcBNsix9t8V8v7CSdJass+bymhLJXSjjjUL3Vr0agR1Y7aCsa\nyt9aELkY3tFp1n60G0ypfnuieqD6MbXv8kgQnmPIPw6EC3lRaim1wme1eH/l\nmU+pgqljAngE5VL2fSNY+SV0uTnp6nOfeBs0BdhDxSDo/+MObfG4YTTo0sXn\naeiT\r\n=pzYy\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "5f672398db5f1cbb93b2e6bd241ac7e907c3861a",
  "homepage": "https://github.com/jondashkyle/nanopage#readme",
  "keywords": [
    "state"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jondashkyle",
      "email": "contact@jon-kyle.com"
    }
  ],
  "name": "nanopage",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">nanopage</h1>\n\n`nanopage` is a super easy way of traversing flat content state.\n\n```\nnpm i nanopage --save\n```\n\n## Example\n\n```js\nvar Page = require('nanopage')\n\n// some content state\nvar state = {\n  href: '/',\n  content: {\n    '/': {\n      title: 'Just a site',\n      text: 'With some text',\n      tags: ['and', 'some', 'tags']\n    },\n    '/example': {\n      title: 'Example',\n      text: 'Scope it out',\n      great: {\n        demo: 'Am I right?',\n        nah: 'Ok nbd.'\n      }\n    }\n  }\n}\n\n// instantiate the page\nvar page = new Page(state)\n\n// directly access pages by their href\nvar site = page('/').value()\nvar about = page('/example').value()\n\n// grab children and files\nvar children = page().children().sort('name', 'asc').value()\nvar files = page().files().value()\n\n// create new queries from previous\nvar first = page(children).first().value()\nvar last = page(children).last().value()\n\n// access specific keys\nvar lastTitle = page(last).value('title') // like this\nvar lastTitle = page(last).value().title // or like this\n```\n\n## Usage\n\n- Every method (almost) is chainable\n- End a query and return it’s value by calling `.value()` or `.v()`\n- Values can be reused in new queries by doing `page(oldQuery)`\n\nWant to transform a directory of files and folders into flat content state? Try [hypha](https://github.com/jondashkyle/hypha)! Super handy to use with [Enoki](https://github.com/enokidotsite/enoki) and [Choo](https://github.com/choojs/choo). If using Choo, you might [not even need it](#extra).\n\n## Philosophy\n\nState is really handy. Especially global state. We ended up with state when webapps started to get really complex and we needed all of the interface to stay in sync with new data and minimize the amount of updates happening to the DOM.\n\nAfter a while, we started using state for sites too. That is, sites that look more like sites and less like apps. Mostly because state is super handy. However, state can get really messy as sites get larger. Where do you store data? How do you reference it? If you have ten nested pages, do you have ten nested objects?\n\nInstead of all of this complexity, lets reintroduce the URL. Each page url of your site is a key in a flat object. We can simply use the `window.location` to grab the data/content for the current page. Or, we can use any arbitrary url, like `/members/nelson`.\n\nThis way of organizing state for sites as a flat object of page urls makes it super trivial to access content in your views and pass it down into components, or whatever. Ok cool!\n\n## Extra\n\nUsing Choo? Try the plugin! Don’t need all the bells and whistles? Try creating your own basic Choo plugin from scratch.\n\n<details><summary><b>Use the Choo plugin</b></summary>\n\n```js\nvar html = require('choo/html')\nvar choo = require('choo')\nvar app = choo()\n\napp.use(require('nanopage/choo'))\n\napp.route('*', function (state, emit) {\n  return html`\n    <body>${state.page().value('title')}</body>\n  `\n})\n\nif (module.parent) module.exports = app\nelse app.mount('body')\n```\n</details>\n\n<details><summary><b>Basic vanilla Choo plugin</b></summary>\n\n```js\napp.use(function (state, emitter) {\n  state.page = function (key) {\n    key = key || (state.href || '/')\n    return state.content[key]\n  }\n})\n```\n</details>\n\n## Methods\n\n#### `.children()`\n\nAlias for `.pages()`.\n\n#### `.file(filename)`\n\nGrab an individual file. For example, `.file('example.jpg')`.\n\n#### `.files()`\n\nFiles of the current `page`.\n\n#### `.find(href)`\n\nLocate a `sub-page` of the `current page` based on the `href`.\n\n#### `.first()`\n\nReturns the first `page` or `file`.\n\n#### `.hasView()`\n\nDoes the current page have a custom view?\n\n#### `.images()`\n\nImages of the current page.\n\n#### `.isActive()`\n\nIs the current page active? Returns boolean.\n\n#### `.last()`\n\nReturns the last `page` or `file`.\n\n#### `.page()`\n\nThe current page.\n\n#### `.pages()`\n\nSub-pages of the current page.\n\n#### `.parent()`\n\nThe parent of the current page.\n\n#### `.sort()`\n\nSorts the current value’s `.pages` by `.order`. Formatting of `.order` follows the arguments of `.sortBy` separated by a space. For example, `date asc`.\n\n#### `.sortBy(key, order)`\n\nSort the `files` or `pages` based by a certain key. Order can be either `asc` or `desc`. For example, `.sortBy('name', 'desc')` or  `.sortBy('date', 'asc')`.\n\n#### `.toArray()`\n\nConverts the values of an object to an array.\n\n#### `.v()`\n\nAlias for `.value()`.\n\n#### `.value()`\n\nReturn the current value. Not chainable.\n\n#### `.visible()`\n\nReturns if the current value key `visible` is not `false`.\n</details>\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jondashkyle/nanopage.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.0.1-next.3"
}
